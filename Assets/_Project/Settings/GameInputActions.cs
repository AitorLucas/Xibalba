//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_Project/Settings/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9cc94b83-605e-4ddd-8b6b-4c3dab9ca865"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ae49b219-deb7-4399-8c47-8c16e0a1c090"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShotDirection"",
                    ""type"": ""Button"",
                    ""id"": ""ebb35a66-c8ab-4e99-94fc-6e1f847539b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightSpell"",
                    ""type"": ""Button"",
                    ""id"": ""7683c37a-88e3-4c41-a196-0a692a1defbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavySpell"",
                    ""type"": ""Button"",
                    ""id"": ""7a219f0f-58cd-4cd8-8f65-ca8adc387d65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""2b7ee740-ecaf-4f81-8c87-766ee26b6bed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""28285352-ba38-4d3d-9a30-19a635032d60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LaserSpell"",
                    ""type"": ""Button"",
                    ""id"": ""29e13136-03ee-4af8-adb3-1ff169f59eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BreathSpell"",
                    ""type"": ""Button"",
                    ""id"": ""99409b8f-ddf0-469e-a4af-c6bdfb8fa3ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExplosionSpell"",
                    ""type"": ""Button"",
                    ""id"": ""50fa1214-6173-434a-873a-a45cc76c6702"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""692b703a-6689-4d2f-8e02-07e5a7227365"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5ad6e6db-c717-496b-91a3-fa8bf508c7ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3af4f32-afef-4d8e-965f-9b6e141bbe8e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e4854a1-46e4-4d3e-badd-61a546e43c10"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""57c0e6aa-0dee-4a26-846b-f7c4467ce359"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""84855a34-f696-4d6f-aa64-0b3b983fa858"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShotDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98c7281e-1821-4bf9-9bb4-eceb3406f9f9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90f8f71c-1d51-4d3c-b759-9643a082b9a3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavySpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1940d287-7740-4bc2-97a0-afb1a7fa9ae6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15ce5b41-22a2-43ff-a900-f0c6494c5fb9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d4a3eaa-09a5-4520-b6bd-c8c8ca6a8853"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LaserSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b293c5cc-c90d-4260-b593-ec9e73cfa93c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BreathSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""010de8be-52d1-48a3-8b79-9973592c8bd1"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExplosionSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""6acb6eb6-b38e-455d-85e8-c91ad2d2a49a"",
            ""actions"": [
                {
                    ""name"": ""TogglePane"",
                    ""type"": ""Button"",
                    ""id"": ""74559047-c31f-4fa7-8c6f-f1b02c99a225"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1aecdeff-f671-4f85-8aa4-03c118c85094"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePane"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_ShotDirection = m_Player.FindAction("ShotDirection", throwIfNotFound: true);
        m_Player_LightSpell = m_Player.FindAction("LightSpell", throwIfNotFound: true);
        m_Player_HeavySpell = m_Player.FindAction("HeavySpell", throwIfNotFound: true);
        m_Player_CastSpell = m_Player.FindAction("CastSpell", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_LaserSpell = m_Player.FindAction("LaserSpell", throwIfNotFound: true);
        m_Player_BreathSpell = m_Player.FindAction("BreathSpell", throwIfNotFound: true);
        m_Player_ExplosionSpell = m_Player.FindAction("ExplosionSpell", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_TogglePane = m_Debug.FindAction("TogglePane", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_ShotDirection;
    private readonly InputAction m_Player_LightSpell;
    private readonly InputAction m_Player_HeavySpell;
    private readonly InputAction m_Player_CastSpell;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_LaserSpell;
    private readonly InputAction m_Player_BreathSpell;
    private readonly InputAction m_Player_ExplosionSpell;
    public struct PlayerActions
    {
        private @GameInputActions m_Wrapper;
        public PlayerActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @ShotDirection => m_Wrapper.m_Player_ShotDirection;
        public InputAction @LightSpell => m_Wrapper.m_Player_LightSpell;
        public InputAction @HeavySpell => m_Wrapper.m_Player_HeavySpell;
        public InputAction @CastSpell => m_Wrapper.m_Player_CastSpell;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @LaserSpell => m_Wrapper.m_Player_LaserSpell;
        public InputAction @BreathSpell => m_Wrapper.m_Player_BreathSpell;
        public InputAction @ExplosionSpell => m_Wrapper.m_Player_ExplosionSpell;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @ShotDirection.started += instance.OnShotDirection;
            @ShotDirection.performed += instance.OnShotDirection;
            @ShotDirection.canceled += instance.OnShotDirection;
            @LightSpell.started += instance.OnLightSpell;
            @LightSpell.performed += instance.OnLightSpell;
            @LightSpell.canceled += instance.OnLightSpell;
            @HeavySpell.started += instance.OnHeavySpell;
            @HeavySpell.performed += instance.OnHeavySpell;
            @HeavySpell.canceled += instance.OnHeavySpell;
            @CastSpell.started += instance.OnCastSpell;
            @CastSpell.performed += instance.OnCastSpell;
            @CastSpell.canceled += instance.OnCastSpell;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @LaserSpell.started += instance.OnLaserSpell;
            @LaserSpell.performed += instance.OnLaserSpell;
            @LaserSpell.canceled += instance.OnLaserSpell;
            @BreathSpell.started += instance.OnBreathSpell;
            @BreathSpell.performed += instance.OnBreathSpell;
            @BreathSpell.canceled += instance.OnBreathSpell;
            @ExplosionSpell.started += instance.OnExplosionSpell;
            @ExplosionSpell.performed += instance.OnExplosionSpell;
            @ExplosionSpell.canceled += instance.OnExplosionSpell;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @ShotDirection.started -= instance.OnShotDirection;
            @ShotDirection.performed -= instance.OnShotDirection;
            @ShotDirection.canceled -= instance.OnShotDirection;
            @LightSpell.started -= instance.OnLightSpell;
            @LightSpell.performed -= instance.OnLightSpell;
            @LightSpell.canceled -= instance.OnLightSpell;
            @HeavySpell.started -= instance.OnHeavySpell;
            @HeavySpell.performed -= instance.OnHeavySpell;
            @HeavySpell.canceled -= instance.OnHeavySpell;
            @CastSpell.started -= instance.OnCastSpell;
            @CastSpell.performed -= instance.OnCastSpell;
            @CastSpell.canceled -= instance.OnCastSpell;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @LaserSpell.started -= instance.OnLaserSpell;
            @LaserSpell.performed -= instance.OnLaserSpell;
            @LaserSpell.canceled -= instance.OnLaserSpell;
            @BreathSpell.started -= instance.OnBreathSpell;
            @BreathSpell.performed -= instance.OnBreathSpell;
            @BreathSpell.canceled -= instance.OnBreathSpell;
            @ExplosionSpell.started -= instance.OnExplosionSpell;
            @ExplosionSpell.performed -= instance.OnExplosionSpell;
            @ExplosionSpell.canceled -= instance.OnExplosionSpell;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_TogglePane;
    public struct DebugActions
    {
        private @GameInputActions m_Wrapper;
        public DebugActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePane => m_Wrapper.m_Debug_TogglePane;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @TogglePane.started += instance.OnTogglePane;
            @TogglePane.performed += instance.OnTogglePane;
            @TogglePane.canceled += instance.OnTogglePane;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @TogglePane.started -= instance.OnTogglePane;
            @TogglePane.performed -= instance.OnTogglePane;
            @TogglePane.canceled -= instance.OnTogglePane;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShotDirection(InputAction.CallbackContext context);
        void OnLightSpell(InputAction.CallbackContext context);
        void OnHeavySpell(InputAction.CallbackContext context);
        void OnCastSpell(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnLaserSpell(InputAction.CallbackContext context);
        void OnBreathSpell(InputAction.CallbackContext context);
        void OnExplosionSpell(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnTogglePane(InputAction.CallbackContext context);
    }
}
